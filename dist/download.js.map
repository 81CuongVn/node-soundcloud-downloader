{"version":3,"sources":["../src/download.js"],"names":["getMediaURL","url","clientID","axiosInstance","get","headers","Accept","withCredentials","res","data","Error","getProgressiveStream","mediaUrl","responseType","r","getHLSStream","fromURLBase","getMediaURLFunction","getProgressiveStreamFunction","getHLSStreamFunction","includes","fromURL","axios","fromMediaObjBase","media","fromURLFunction","validatemedia","fromMediaObj","format"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport m3u8stream from 'm3u8stream'\nimport { handleRequestErrs } from './util'\n\nexport const getMediaURL = async (url, clientID, axiosInstance) => {\n  const res = await axiosInstance.get(`${url}?client_id=${clientID}`, {\n    headers: {\n      'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36',\n      Accept: '*/*',\n      'Accept-Encoding': 'gzip, deflate, br'\n    },\n    withCredentials: true\n  })\n  if (!res.data.url) throw new Error(`Invalid response from Soundcloud. Check if the URL provided is correct: ${url}`)\n  return res.data.url\n}\n\nexport const getProgressiveStream = async (mediaUrl, axiosInstance) => {\n  const r = await axiosInstance.get(mediaUrl, {\n    withCredentials: true,\n    responseType: 'stream'\n  })\n\n  return r.data\n}\n\nexport const getHLSStream = mediaUrl => m3u8stream(mediaUrl)\n\nexport const fromURLBase = async (url, clientID, getMediaURLFunction, getProgressiveStreamFunction, getHLSStreamFunction, axiosInstance) => {\n  try {\n    const mediaUrl = await getMediaURLFunction(url, clientID, axiosInstance)\n\n    if (url.includes('/progressive')) {\n      return await getProgressiveStreamFunction(mediaUrl, axiosInstance)\n    }\n\n    return getHLSStreamFunction(mediaUrl)\n  } catch (err) {\n    throw handleRequestErrs(err)\n  }\n}\n\nexport const fromURL = async (url, clientID) => await fromURLBase(url, clientID, getMediaURL, getProgressiveStream, getHLSStream, axios)\n\nexport const fromMediaObjBase = async (media, clientID, getMediaURLFunction, getProgressiveStreamFunction, getHLSStreamFunction, fromURLFunction, axiosInstance) => {\n  if (!validatemedia(media)) throw new Error('Invalid media object provided')\n  return await fromURLFunction(media.url, clientID, getMediaURLFunction, getProgressiveStreamFunction, getHLSStreamFunction, axiosInstance)\n}\n\nexport const fromMediaObj = async (media, clientID) => await fromMediaObjBase(media, clientID, getMediaURL, getProgressiveStream, getHLSStream, fromURL, axios)\n\nconst validatemedia = media => {\n  if (!media.url || !media.format) return false\n  return true\n}\n"],"file":"download.js"}