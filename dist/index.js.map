{"version":3,"sources":["../src/index.js"],"names":["scdl","download","url","clientID","info","media","transcodings","downloadFormat","format","filtered","console","log","length","Error","filterMedia","STREAMING_PROTOCOLS","FORMATS","downloadMedia","fromMediaObj","downloadFromURL","fromURL","getInfo","isValidURL"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AAEA,IAAMA,IAAI,GAAG,EAAb;;AACA,IAAMC,QAAQ;AAAA,2FAAG,iBAAOC,GAAP,EAAYC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACI,sBAAQD,GAAR,EAAaC,QAAb,CADJ;;AAAA;AACTC,YAAAA,IADS;AAAA;AAAA,mBAEF,4BAAaA,IAAI,CAACC,KAAL,CAAWC,YAAX,CAAwB,CAAxB,CAAb,EAAyCH,QAAzC,CAFE;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARF,QAAQ;AAAA;AAAA;AAAA,GAAd;;AAKA,IAAMM,cAAc;AAAA,4FAAG,kBAAOL,GAAP,EAAYC,QAAZ,EAAsBK,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACF,sBAAQN,GAAR,EAAaC,QAAb,CADE;;AAAA;AACfC,YAAAA,IADe;AAEfK,YAAAA,QAFe,GAEJ,6BAAYL,IAAI,CAACC,KAAL,CAAWC,YAAvB,EAAqC;AAAEE,cAAAA,MAAM,EAAEA;AAAV,aAArC,CAFI;AAGrBE,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AAHqB,kBAIjBA,QAAQ,CAACG,MAAT,KAAoB,CAJH;AAAA;AAAA;AAAA;;AAAA,kBAIY,IAAIC,KAAJ,wDAA0DL,MAA1D,OAJZ;;AAAA;AAAA;AAAA,mBAKR,4BAAaC,QAAQ,CAAC,CAAD,CAArB,EAA0BN,QAA1B,CALQ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdI,cAAc;AAAA;AAAA;AAAA,GAApB;;AAQAP,IAAI,CAACc,WAAL,GAAmBA,uBAAnB;AACAd,IAAI,CAACe,mBAAL,GAA2BA,qBAA3B;AACAf,IAAI,CAACgB,OAAL,GAAeA,mBAAf;AACAhB,IAAI,CAACC,QAAL,GAAgBA,QAAhB;AACAD,IAAI,CAACiB,aAAL,GAAqBC,sBAArB;AACAlB,IAAI,CAACmB,eAAL,GAAuBC,iBAAvB;AACApB,IAAI,CAACqB,OAAL,GAAeA,gBAAf;AACArB,IAAI,CAACsB,UAAL,GAAkBA,iBAAlB;AACAtB,IAAI,CAACO,cAAL,GAAsBA,cAAtB;eAEeP,I","sourcesContent":["import getInfo from './info'\nimport filterMedia from './filter-media'\nimport { fromURL, fromMediaObj } from './download'\n\nimport isValidURL from './is-url'\n\nimport STREAMING_PROTOCOLS from './protocols'\nimport FORMATS from './formats'\n\nconst scdl = {}\nconst download = async (url, clientID) => {\n  const info = await getInfo(url, clientID)\n  return await fromMediaObj(info.media.transcodings[0], clientID)\n}\n\nconst downloadFormat = async (url, clientID, format) => {\n  const info = await getInfo(url, clientID)\n  const filtered = filterMedia(info.media.transcodings, { format: format })\n  console.log(filtered)\n  if (filtered.length === 0) throw new Error(`Could not find media with specified format: (${format})`)\n  return await fromMediaObj(filtered[0], clientID)\n}\n\nscdl.filterMedia = filterMedia\nscdl.STREAMING_PROTOCOLS = STREAMING_PROTOCOLS\nscdl.FORMATS = FORMATS\nscdl.download = download\nscdl.downloadMedia = fromMediaObj\nscdl.downloadFromURL = fromURL\nscdl.getInfo = getInfo\nscdl.isValidURL = isValidURL\nscdl.downloadFormat = downloadFormat\n\nexport default scdl\n"],"file":"index.js"}