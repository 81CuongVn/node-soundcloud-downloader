{"version":3,"sources":["../src/download-media.js"],"names":["fromInfo","info","clientID","validateInfo","Error","link","url","axios","get","headers","Accept","withCredentials","res","data","format","protocol","STREAMING_PROTOCOLS","PROGRESSIVE","responseType","r"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,QAAQ;AAAA,2FAAG,iBAAOC,IAAP,EAAaC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACVC,YADU;AAAA;AAAA;AAAA;;AAAA,kBACU,IAAIC,KAAJ,CAAU,8BAAV,CADV;;AAAA;AAGTC,YAAAA,IAHS,aAGCJ,IAAI,CAACK,GAHN,wBAGuBJ,QAHvB;AAAA;AAAA,mBAIGK,kBAAMC,GAAN,CAAUH,IAAV,EAAgB;AAChCI,cAAAA,OAAO,EAAE;AACP,8BAAc,2HADP;AAEPC,gBAAAA,MAAM,EAAE,KAFD;AAGP,mCAAmB;AAHZ,eADuB;AAMhCC,cAAAA,eAAe,EAAE;AANe,aAAhB,CAJH;;AAAA;AAITC,YAAAA,GAJS;;AAAA,gBAYVA,GAAG,CAACC,IAAJ,CAASP,GAZC;AAAA;AAAA;AAAA;;AAAA,kBAYU,IAAIF,KAAJ,mFAAqFC,IAArF,EAZV;;AAAA;AAAA,kBAcXJ,IAAI,CAACa,MAAL,CAAYC,QAAZ,KAAyBC,sBAAoBC,WAdlC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAeGV,kBAAMC,GAAN,CAAUI,GAAG,CAACC,IAAJ,CAASP,GAAnB,EAAwB;AACtCK,cAAAA,eAAe,EAAE,IADqB;AAEtCO,cAAAA,YAAY,EAAE;AAFwB,aAAxB,CAfH;;AAAA;AAePC,YAAAA,CAfO;AAAA,6CAmBNA,CAAC,CAACN,IAnBI;;AAAA;AAAA,6CAsBR,4BAAWD,GAAG,CAACC,IAAJ,CAASP,GAApB,CAtBQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARN,QAAQ;AAAA;AAAA;AAAA,GAAd;;AAyBA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAAAF,IAAI,EAAI;AAC3B,MAAI,CAACA,IAAI,CAACK,GAAN,IAAa,CAACL,IAAI,CAACa,MAAvB,EAA+B,OAAO,KAAP;AAC/B,SAAO,IAAP;AACD,CAHD;;eAKed,Q","sourcesContent":["import axios from 'axios'\nimport m3u8stream from 'm3u8stream'\nimport STREAMING_PROTOCOLS from './protocols'\n\nconst fromInfo = async (info, clientID) => {\n  if (!validateInfo) throw new Error('Invalid info object provided')\n\n  const link = `${info.url}?client_id=${clientID}`\n  const res = await axios.get(link, {\n    headers: {\n      'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36',\n      Accept: '*/*',\n      'Accept-Encoding': 'gzip, deflate, br'\n    },\n    withCredentials: true\n  })\n  if (!res.data.url) throw new Error(`Invalid response from Soundcloud. Check if the URL provided is correct: ${link}`)\n\n  if (info.format.protocol === STREAMING_PROTOCOLS.PROGRESSIVE) {\n    const r = await axios.get(res.data.url, {\n      withCredentials: true,\n      responseType: 'stream'\n    })\n    return r.data\n  }\n\n  return m3u8stream(res.data.url)\n}\n\nconst validateInfo = info => {\n  if (!info.url || !info.format) return false\n  return true\n}\n\nexport default fromInfo\n"],"file":"download-media.js"}