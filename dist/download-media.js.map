{"version":3,"sources":["../src/download-media.js"],"names":["fromMedia","media","clientID","validatemedia","Error","link","url","axios","get","headers","Accept","withCredentials","res","data","format","protocol","STREAMING_PROTOCOLS","PROGRESSIVE","responseType","r"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,SAAS;AAAA,2FAAG,iBAAOC,KAAP,EAAcC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACXC,aADW;AAAA;AAAA;AAAA;;AAAA,kBACU,IAAIC,KAAJ,CAAU,+BAAV,CADV;;AAAA;AAGVC,YAAAA,IAHU,aAGAJ,KAAK,CAACK,GAHN,wBAGuBJ,QAHvB;AAAA;AAAA,mBAIEK,kBAAMC,GAAN,CAAUH,IAAV,EAAgB;AAChCI,cAAAA,OAAO,EAAE;AACP,8BAAc,2HADP;AAEPC,gBAAAA,MAAM,EAAE,KAFD;AAGP,mCAAmB;AAHZ,eADuB;AAMhCC,cAAAA,eAAe,EAAE;AANe,aAAhB,CAJF;;AAAA;AAIVC,YAAAA,GAJU;;AAAA,gBAYXA,GAAG,CAACC,IAAJ,CAASP,GAZE;AAAA;AAAA;AAAA;;AAAA,kBAYS,IAAIF,KAAJ,mFAAqFC,IAArF,EAZT;;AAAA;AAAA,kBAcZJ,KAAK,CAACa,MAAN,CAAaC,QAAb,KAA0BC,sBAAoBC,WAdlC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAeEV,kBAAMC,GAAN,CAAUI,GAAG,CAACC,IAAJ,CAASP,GAAnB,EAAwB;AACtCK,cAAAA,eAAe,EAAE,IADqB;AAEtCO,cAAAA,YAAY,EAAE;AAFwB,aAAxB,CAfF;;AAAA;AAeRC,YAAAA,CAfQ;AAAA,6CAmBPA,CAAC,CAACN,IAnBK;;AAAA;AAAA,6CAsBT,4BAAWD,GAAG,CAACC,IAAJ,CAASP,GAApB,CAtBS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATN,SAAS;AAAA;AAAA;AAAA,GAAf;;AAyBA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAAAF,KAAK,EAAI;AAC7B,MAAI,CAACA,KAAK,CAACK,GAAP,IAAc,CAACL,KAAK,CAACa,MAAzB,EAAiC,OAAO,KAAP;AACjC,SAAO,IAAP;AACD,CAHD;;eAKed,S","sourcesContent":["import axios from 'axios'\nimport m3u8stream from 'm3u8stream'\nimport STREAMING_PROTOCOLS from './protocols'\n\nconst fromMedia = async (media, clientID) => {\n  if (!validatemedia) throw new Error('Invalid media object provided')\n\n  const link = `${media.url}?client_id=${clientID}`\n  const res = await axios.get(link, {\n    headers: {\n      'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36',\n      Accept: '*/*',\n      'Accept-Encoding': 'gzip, deflate, br'\n    },\n    withCredentials: true\n  })\n  if (!res.data.url) throw new Error(`Invalid response from Soundcloud. Check if the URL provided is correct: ${link}`)\n\n  if (media.format.protocol === STREAMING_PROTOCOLS.PROGRESSIVE) {\n    const r = await axios.get(res.data.url, {\n      withCredentials: true,\n      responseType: 'stream'\n    })\n    return r.data\n  }\n\n  return m3u8stream(res.data.url)\n}\n\nconst validatemedia = media => {\n  if (!media.url || !media.format) return false\n  return true\n}\n\nexport default fromMedia\n"],"file":"download-media.js"}